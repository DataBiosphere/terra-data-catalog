name: Nightly Tests

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: 'environment to run test in'
        required: true
        options:
          - perf
          - staging
          - alpha
          - dev
        default: 'perf'
  schedule:
    - cron: "0 6 * * *" # runs at 6 AM UTC, 1 AM EST.

env:
  TEST_ENV: ${{ github.event.inputs.environment }}
  TEST_DEFAULT: perf

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Gradle build service
        run: ./gradlew --build-cache :service:build -x test

  jib:
    needs: [ build ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Construct docker image name and tag
        id: image-name
        run: |
          GITHUB_REPO=$(basename ${{ github.repository }})
          GIT_SHORT_HASH=$(git rev-parse --short HEAD)
          echo ::set-output name=name::${GITHUB_REPO}:${GIT_SHORT_HASH}

      - name: Build image locally with jib
        run: |
          ./gradlew --build-cache :service:jibDockerBuild \
            --image=${{ steps.image-name.outputs.name }} \
            -Djib.console=plain

      - name: Run Trivy vulnerability scanner
        uses: broadinstitute/dsp-appsec-trivy-action@v1
        with:
          image: ${{ steps.image-name.outputs.name }}

  test-env:
    runs-on: ubuntu-latest
    outputs:
      test-env: ${{ steps.test-env.outputs.test-env }}

    steps:
      - name: Set default test env
        id: test-env
        run: |
          echo ::set-output name=test-env::${{ env.TEST_ENV || env.TEST_DEFAULT }}

  test-runner:
    needs: [ build, test-env ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Get the helm chart versions for the perf env
        run: |
          curl -H 'Authorization: token ${{ secrets.BROADBOT_TOKEN }}' \
            -H 'Accept: application/vnd.github.v3.raw' \
            -L https://api.github.com/repos/broadinstitute/terra-helmfile/contents/versions/app/dev.yaml \
            --create-dirs -o "integration/src/main/resources/rendered/dev.yaml"
          curl -H 'Authorization: token ${{ secrets.BROADBOT_TOKEN }}' \
            -H 'Accept: application/vnd.github.v3.raw' \
            -L https://api.github.com/repos/broadinstitute/terra-helmfile/contents/environments/live/${{ needs.test-env.outputs.test-env }}.yaml \
            --create-dirs -o "integration/src/main/resources/rendered/${{ needs.test-env.outputs.test-env }}.yaml"

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Render GitHub Secrets
        run: |
          echo "${{ secrets.DEV_FIRECLOUD_ACCOUNT_B64 }}" | base64 -d > "integration/src/main/resources/rendered/user-delegated-sa.json"
          echo "${{ secrets.PERF_TESTRUNNER_ACCOUNT_B64 }}" | base64 -d > "integration/src/main/resources/rendered/testrunner-perf.json"

      - name: Run perf test suite
        run: |
          mkdir -p integration/build/reports
          exit 0
#          ./gradlew --build-cache runTest --args="suites/$TEST_ENV/FullIntegration.json build/reports"

#      - name: Upload Test Reports for QA
#        if: always()
#        run: |
#          ./gradlew --build-cache uploadResults --args="CompressDirectoryToTerraKernelK8S.json build/reports"

      - name: Upload Test Reports for GitHub
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: Test Reports
          path: integration/build/reports

  notify-de-slack:
    needs: [ build, jib, test-env, test-runner ]
    runs-on: ubuntu-latest
    if: failure()

    steps:
      - name: "Notify #jade-data-explorer Slack on failure"
        uses: broadinstitute/action-slack@v3.8.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          STATUS: failure
        with:
          author_name: ${{ github.actor }}
          channel: 'W016GLU78GM'
          status: ${{ env.STATUS }}
          fields: workflow,ref
          text: >
            ${{ format('Catalog tests *{0}* in the {1} environment {2}',
            env.STATUS, needs.test-env.outputs.test-env,
            env.STATUS == 'success' && ':check_green:' || ':sadpanda:') }}
          username: 'Data Explorer Tests'

  notify-qa-slack:
    needs: [ build, jib, test-env, test-runner ]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: "Always notify #dsde-qa Slack"
        uses: broadinstitute/action-slack@v3.8.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          STATUS: >-
            ${{ needs.build.result == 'success'
            && needs.jib.result == 'success'
            && needs.test-runner.result == 'success'
            && 'success' || 'failure' }}
        with:
          author_name: ${{ github.actor }}
          channel: 'W016GLU78GM'
          status: ${{ env.STATUS }}
          fields: workflow,ref
          text: >
            ${{ format('Catalog tests *{0}* in the {1} environment {2}',
            env.STATUS, needs.test-env.outputs.test-env,
            env.STATUS == 'success' && ':check_green:' || ':sadpanda:') }}
          username: 'Data Explorer Tests'
