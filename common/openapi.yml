openapi: 3.0.3
info:
  title: Terra Data Catalog
  description: |
    An indexed catalog of data for use in Terra.

    ⚠️ Do not add sensitive data. All catalog entries are publicly accessible to all Terra users. ⚠️
  version: 0.0.1
paths:
  /status:
    get:
      summary: Check status of the service
      tags: [ public ]
      operationId: getStatus
      security: [ ]
      responses:
        '200':
          $ref: '#/components/responses/SystemStatusResponse'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/SystemStatusResponse'

  /version:
    get:
      summary: Get version info of the deployed service
      tags: [ public ]
      operationId: getVersion
      security: [ ]
      responses:
        '200':
          description: Version information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionProperties'
        '404':
          description: "Version not configured"
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/datasets:
    get:
      summary: Lists the available catalog datasets
      tags: [ datasets ]
      operationId: listDatasets
      responses:
        '200':
          description: A JSON array of catalog datasets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetsListResponse'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Upsert a new dataset
      tags: [ datasets ]
      description: |
        ⚠️ Do not add sensitive data. All catalog entries are publicly accessible to all Terra users. ⚠️
      operationId: upsertDataset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDatasetRequest'
        required: true
      responses:
        200:
          $ref: '#/components/responses/DatasetResponse'
        403:
          description: No permission to modify metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorReport'
  /api/v1/datasets/{id}:
    get:
      summary: Given a dataset ID, return its catalog entry with storage source information
      tags: [ datasets ]
      operationId: getDataset
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: A JSON object of the dataset
          content:
            application/json:
              schema:
                type: string
        '404':
          description: "Dataset not found"
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Update the catalog entry for a dataset
      tags: [ datasets ]
      description: |
        ⚠️ Do not add sensitive data. All catalog entries are publicly accessible to all Terra users. ⚠️
      operationId: updateDataset
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        description: The catalog entry to replace existing entry for this dataset
        content:
          application/json:
            schema:
              type: string
            examples:
              jsonObject:
                summary: A sample object
                value: '{
  "dct:title": "sint",
  "dct:description": "officia dolor et dolor",
  "dct:creator": "voluptate exercitation Ut cillum",
  "dct:issued": "1996-08-17T19:54:24.0Z",
  "TerraDCAT_ap:hasDataCollection": [
    {
      "dct:publisher": "Duis",
      "dct:issued": "1960-12-29T23:38:51.0Z",
      "dct:creator": "in irure dolor in non",
      "dct:modified": "1949-02-20T01:48:05.0Z",
      "dct:identifier": "qui laboris in",
      "dct:title": "dolore Duis"
    },
    {
      "dct:publisher": "proident eu in amet sed",
      "dct:creator": "ut amet eu elit",
      "dct:issued": "1945-04-14T01:25:37.0Z",
      "dct:title": "consectetur anim adipisicing",
      "dct:description": "amet labore do incididunt id",
      "dct:identifier": "cupidatat",
      "dct:modified": "1979-06-08T11:47:09.0Z"
    },
    {
      "dct:title": "adipisicing mollit qui",
      "dct:identifier": "ad labore dolore enim aliquip",
      "dct:issued": "1954-06-17T13:05:40.0Z",
      "anim_d87": true
    }
  ],
  "dcat:accessURL": "cillum mollit",
  "storage": [
    {
      "cloudPlatform": "azure",
      "laboris_a": 46232158.70534593,
      "ex25": -77142789.36118478
    },
    {
      "deserunt_8ed": false,
      "voluptate_a8": false,
      "veniam_d": 16463225.891367823
    }
  ],
  "counts": {
    "samples": -44514847,
    "donors": 83785293,
    "files": 36174655
  },
  "contributors": [
    {
      "email": "anim in dolor",
      "additionalInformation": {
        "doloreb": -41708022,
        "do_3": "non elit esse officia"
      },
      "name": "do ut magna in",
      "ida": false,
      "ut8e": 74800361
    },
    {
      "additionalInformation": {
        "et_eef": -34070171.25837757
      },
      "email": "in ea dolore in"
    },
    {
      "name": "eu eiusmod labore",
      "email": "magna pariatur cupidatat in",
      "additionalInformation": {
        "mollit_3": 46544276.01068279
      },
      "anim_9": -44261677.03337054,
      "mollit_8": -48392032
    },
    {
      "name": "Excepteur consequat",
      "additionalInformation": {
        "anim_7b8": true,
        "aliquip_7": "anim labore reprehenderit quis",
        "tempor_03": -84144440,
        "Lorem4a": 23215743.30680622
      },
      "email": "non irure eiusmod",
      "nostrud_3": "veniam",
      "est_b": true,
      "ut_27": -83762846.0241488,
      "Duis_e": "quis"
    }
  ],
  "TerraDCAT_ap:hasGenomicDataType": [
    "elit fugiat eu nostrud"
  ],
  "TerraDCAT_ap:hasOwner": "non dolor eu ut voluptate",
  "TerraDCAT_ap:hasPublication": [
    {
      "dcat:accessURL": "incididunt eu amet adipisicing occaecat",
      "dct:title": "quis laboris"
    },
    {
      "dct:title": "Duis consequat dolor",
      "dcat:accessURL": "quis",
      "aliqua_5": "cupidatat minim ea eiusmod occaecat"
    }
  ],
  "prov:wasAssociatedWith": [
    "velit",
    "esse ea"
  ],
  "samples": {
    "eiusmod_e1_": false,
    "reprehenderit_2": true
  },
  "TerraDCAT_ap:hasConsentGroup": "qui adipisicing consectetur ut",
  "TerraDCAT_ap:hasCustodian": [
    "sint mollit id cupidatat dolor",
    "sit non dolor ut officia"
  ],
  "TerraDCAT_ap:hasOriginalPublication": {
    "dct:title": "ad amet",
    "amet783": true,
    "doloree40": 88647167
  },
  "fileAggregate": [
    {
      "byteSize": 31285755,
      "TerraCore:hasFileFormat": "nisi",
      "count": 8911265,
      "anim9": "nulla aliqua Ut sed",
      "dolore83a": -50706848.01385088,
      "dolor8": 73959962.60321835,
      "Excepteur43": 63858776,
      "in276": true
    },
    {
      "count": 15916179,
      "TerraCore:hasFileFormat": "eiusmod",
      "byteSize": -24580801,
      "est_75": "Ut in amet velit"
    },
    {
      "TerraCore:hasFileFormat": "irure do",
      "byteSize": -79723165,
      "count": 36351881
    },
    {
      "TerraCore:hasFileFormat": "Lorem",
      "byteSize": -37260619,
      "count": -26071485
    }
  ],
  "TerraDCAT_ap:hasDataUsePermission": "DUO:0000011",
  "requestAccessURL": "commodo",
  "TerraCoreValueSets:SampleType": [
    "fugiat in enim",
    "pariatur ut nostrud"
  ],
  "prov:wasGeneratedBy": [
    {
      "TerraCore:hasAssayCategory": [
        "deserunt id",
        "sint aute Duis dolore",
        "eu",
        "dolor quis ipsum ullamco"
      ],
      "TerraCore:hasDataModality": [
        "consequat Duis sunt",
        "laborum consequat enim eiusmod veniam",
        "ea est in nisi ut",
        "proident mollit Excepteur commodo occaecat",
        "velit sunt exercitation ad"
      ]
    },
    {
      "aliqua3": 81242364,
      "laboris5a": "occaecat"
    },
    {
      "TerraCore:hasAssayCategory": [
        "cupidatat",
        "consectetur proident dolor",
        "velit adipisicing",
        "sunt ex irure cillum",
        "enim voluptate cillum"
      ],
      "TerraCore:hasDataModality": [
        "quis reprehenderit magna",
        "ullamco in ut qui sed",
        "exercitation dolore fugiat Excepteur"
      ]
    }
  ]
}
'
        required: true
      responses:
        204:
          description: The catalog entry was updated successfully
          content: { }
        403:
          description: No permission to modify metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorReport'
        404:
          description: Not found - dataset id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorReport'
    delete:
      summary: Delete the catalog entry for a dataset
      tags: [ datasets ]
      operationId: deleteDataset
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        204:
          description: The catalog entry was deleted successfully
          content: { }
        403:
          description: No permission to modify metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorReport'
        404:
          description: Not found - dataset id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorReport'
  /api/v1/datasets/{id}/export:
    post:
      summary: Export the dataset data into a workspace
      tags: [ datasets ]
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetExportRequest'
      operationId: exportDataset
      responses:
        '204':
          description: The data was successfully exported into a workspace
          content: { }
        '403':
          description: User does not have permission to export workspace
        '404':
          description: Unable to export data into a workspace
  /api/v1/datasets/{id}/export/{workspaceId}:
    post:
      summary: Export the dataset data into a workspace
      tags: [ datasets ]
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/WorkspaceIdPath'
      operationId: exportDatasetDeprecated
      responses:
        '204':
          description: The data was successfully exported into a workspace
          content: { }
        '403':
          description: User does not have permission to export workspace
        '404':
          description: Unable to export data into a workspace
  /api/v1/datasets/{id}/tables:
    get:
      summary: Given a dataset ID, return its preview metadata
      tags: [ datasets ]
      operationId: listDatasetPreviewTables
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: A JSON object of the preview metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetPreviewTablesResponse'
        '404':
          description: "Dataset not found"
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/datasets/{id}/tables/{tableName}:
    get:
      summary: Given a dataset ID and a table name, return a table preview
      tags: [ datasets ]
      operationId: getDatasetPreviewTable
      parameters:
        - $ref: '#/components/parameters/Id'
        - in: path
          name: tableName
          schema:
            type: string
          required: true
      responses:
        '200':
          description: A JSON object of the table preview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetPreviewTable'
        '404':
          description: "Dataset not found"
        '500':
          $ref: '#/components/responses/ServerError'

components:
  parameters:
    Id:
      name: id
      in: path
      description: A UUID to used to identify an object in the catalog
      required: true
      schema:
        type: string
        format: uuid
    WorkspaceIdPath:
      name: workspaceId
      in: path
      description: A UUID to used to identify a workspace object
      required: true
      schema:
        type: string
        format: uuid

  responses:
    SystemStatusResponse:
      description: A JSON description of the subsystems and their statuses.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SystemStatus'
    DatasetResponse:
      description: The created dataset's ID
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatedDatasetId'


    # Error Responses
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    PermissionDenied:
      description: Permission denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    NotFound:
      description: Not found (or unauthorized)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'

  schemas:
    ErrorReport:
      type: object
      required: [ message, statusCode ]
      properties:
        message:
          type: string
        statusCode:
          type: integer

    SystemStatus:
      required: [ ok, systems ]
      type: object
      properties:
        ok:
          type: boolean
          description: whether any system(s) need attention
        systems:
          type: object
          additionalProperties:
            type: object
            properties:
              ok:
                type: boolean
              messages:
                type: array
                items:
                  type: string

    CreatedDatasetId:
      type: object
      required: [ id ]
      properties:
        id:
          type: string
          format: uuid

    WorkspaceId:
      description: A UUID to used to identify a workspace object
      type: string
      format: uuid

    DatasetsListResponse:
      type: object
      required: [ result ]
      properties:
        result:
          type: array
          items:
            type: object
      description: List of catalog datasets

    VersionProperties:
      type: object
      properties:
        gitTag:
          type: string
        gitHash:
          type: string
        github:
          type: string
        build:
          type: string

    CreateDatasetRequest:
      description: |
        ⚠️ Do not add sensitive data. All catalog entries are publicly accessible to all Terra users. ⚠️
      type: object
      required: [storageSystem, storageSourceId]
      properties:
        storageSystem:
          $ref: '#/components/schemas/StorageSystem'
        storageSourceId:
          type: string
        catalogEntry:
          type: string

    DatasetExportRequest:
      type: object
      required: workspaceId
      properties:
        workspaceId:
          $ref: '#/components/schemas/WorkspaceId'

    DatasetPreviewTablesResponse:
      type: object
      properties:

        tables:
          type: array
          items:
            $ref: '#/components/schemas/TableMetadata'
      description: >
        DatasetPreviewTablesResponse returns information about the table structure of a dataset.

    DatasetPreviewTable:
      type: object
      properties:
        columns:
          type: array
          items:
            $ref: '#/components/schemas/ColumnModel'
        rows:
          type: array
          items:
            type: object

    ColumnModel:
      type: object
      properties:
        name:
          type: string

    TableMetadata:
      required:
        - name
      type: object
      properties:
        name:
          type: string
        hasData:
          type: boolean

    StorageSystem:
      type: string
      description: The storage system for this dataset
      enum: ['tdr', 'wks', 'ext']

  securitySchemes:
    authorization:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            openid: open id authorization
            email: email authorization
            profile: profile authorization
    bearerAuth:
      type: http
      scheme: bearer

security:
  - authorization: [ openid, email, profile ]
  - bearerAuth: [ ]
