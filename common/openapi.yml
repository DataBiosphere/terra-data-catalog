openapi: 3.0.3
info:
  title: Terra Data Catalog
  description: An indexed catalog of data for use in Terra
  version: 0.0.1
paths:
  /status:
    get:
      summary: Check status of the service.
      tags: [ public ]
      operationId: getStatus
      security: [ ]
      responses:
        '200':
          $ref: '#/components/responses/SystemStatusResponse'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/SystemStatusResponse'

  /version:
    get:
      summary: Get version info of the deployed service.
      tags: [ public ]
      operationId: getVersion
      security: [ ]
      responses:
        '200':
          description: Version information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionProperties'
        '404':
          description: "Version not configured"
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/datasets:
    get:
      summary: Lists the available catalog datasets.
      tags: [ datasets ]
      operationId: listDatasets
      responses:
        '200':
          description: A JSON array of catalog datasets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetsListResponse'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags: [ datasets ]
      description: Create a new dataset
      operationId: createDataset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDatasetRequest'
        required: true
      responses:
        204:
          description: The catalog entry was created successfully
          content: { }
        403:
          description: No permission to modify metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorReport'
  /api/v1/datasets/{id}:
    get:
      summary: Given a dataset ID, return its catalog entry
      tags: [ datasets ]
      operationId: getDataset
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: A JSON object of the dataset
          content:
            application/json:
              schema:
                type: string
        '404':
          description: "Dataset not found"
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      tags: [ datasets ]
      description: Update the catalog entry for a dataset
      operationId: updateDataset
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        description: The catalog entry to replace existing entry for this dataset
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        204:
          description: The catalog entry was updated successfully
          content: { }
        403:
          description: No permission to modify metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorReport'
        404:
          description: Not found - dataset id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorReport'
    delete:
      tags: [ datasets ]
      description: Delete the catalog entry for a dataset
      operationId: deleteDataset
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        204:
          description: The catalog entry was deleted successfully
          content: { }
        403:
          description: No permission to modify metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorReport'
        404:
          description: Not found - dataset id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorReport'

components:
  parameters:
    Id:
      name: id
      in: path
      description: A UUID to used to identify an object in the catalog
      required: true
      schema:
        type: string
        format: uuid

  responses:
    SystemStatusResponse:
      description: A JSON description of the subsystems and their statuses.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SystemStatus'

    # Error Responses
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    PermissionDenied:
      description: Permission denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    NotFound:
      description: Not found (or unauthorized)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'

  schemas:
    ErrorReport:
      type: object
      required: [ message, statusCode ]
      properties:
        message:
          type: string
        statusCode:
          type: integer

    SystemStatus:
      required: [ ok, systems ]
      type: object
      properties:
        ok:
          type: boolean
          description: whether any system(s) need attention
        systems:
          type: object
          additionalProperties:
            type: object
            properties:
              ok:
                type: boolean
              messages:
                type: array
                items:
                  type: string

    DatasetsListResponse:
      type: object
      properties:
        result:
          type: array
          items:
            type: object
      description: List of catalog datasets

    VersionProperties:
      type: object
      properties:
        gitTag:
          type: string
        gitHash:
          type: string
        github:
          type: string
        build:
          type: string

    CreateDatasetRequest:
      type: object
      properties:
        storageSystem:
          type: string
        storageSourceId:
          type: string
        catalogEntry:
          type: string

  securitySchemes:
    authorization:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            openid: open id authorization
            email: email authorization
            profile: profile authorization
    bearerAuth:
      type: http
      scheme: bearer

security:
  - authorization: [ openid, email, profile ]
  - bearerAuth: [ ]
