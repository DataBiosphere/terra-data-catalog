
dependencies {
    implementation 'io.swagger.core.v3:swagger-annotations'
    runtimeOnly 'org.webjars.npm:swagger-ui-dist:4.5.0'
    swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli'

    // Versioned by Spring:
    implementation 'javax.validation:validation-api'
    implementation 'org.webjars:webjars-locator-core'
}

def artifactGroup = '${group}.catalog'

generateSwaggerCode {
    inputFile = file('../common/openapi.yml')
    language = 'spring'
    components = ['models', 'apis']
    additionalProperties = [
	modelPackage     : "${artifactGroup}.generated.model",
	apiPackage       : "${artifactGroup}.generated.api",
	dateLibrary      : 'java8',
	interfaceOnly    : 'true',
	useTags          : 'true',
	springBootVersion: dependencyManagement.managedVersions['org.springframework.boot:spring-boot']
    ]
    rawOptions = ['--import-mappings', "VersionProperties=${artifactGroup}.config.VersionProperties"]
}

String swaggerOutputSrc = "${generateSwaggerCode.outputDir}/src/main/java"

idea.module.generatedSourceDirs = [file(swaggerOutputSrc)]
sourceSets.main.java.srcDir swaggerOutputSrc
compileJava.dependsOn generateSwaggerCode

/*
// The lombok plugin adds an analysis step for each srcDir, but doesn't know to register
// a dependency on swagger code generation for that code, so things can't be up-to-date
afterEvaluate {
    tasks.each {
	if (it.name.startsWith('generateMainEffectiveLombokConfig') &&
	    it.hasProperty('paths') &&
	    it.paths.contains(file(swaggerOutputSrc))) {
	    it.dependsOn(generateSwaggerCode)
	}
    }
}
*/

/*
// see https://github.com/n0mer/gradle-git-properties
gitProperties {
    gitPropertiesName = 'rendered/version.properties'
    keys = []
    customProperty('externalcreds.version.gitTag', { it.describe(tags: true) })
    customProperty('externalcreds.version.gitHash', { it.head().abbreviatedId })
    customProperty('externalcreds.version.github', { "https://github.com/DataBiosphere/terra-external-credentials-manager/tree/${it.describe(tags: true)}" })
    customProperty('externalcreds.version.build', version)
}
*/
